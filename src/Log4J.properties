#Log4j中有四个主要的组件，它们分别是 Logger（记录器）、Appender（输出目的地）、Layout（布局器:输出格式）和信息输出级别

#Log4j 允许开发人员定义多个Logger，每个Logger拥有自己的名字，#Logger之间通过名字来表明隶属关系。
#有一个Logger称为Root，它永远 存在，且不能通过名字检索或引用，可以通过Logger.getRootLogger()
#静态方法获得，其它Logger通过 Logger.getLogger(String name)方法

#Log4j中将要输出的Log信息定义了5种级别，依次为DEBUG、INFO、WARN、ERROR和FATAL;all<debug < info < warn < error < fatal<off

#stdout在控制台输出，不写console将不输出日志信息
#rootLogger作为根logger，被其他logger继承属性。info是信息输出级别，其余都是日志输出地点(具体指哪里由后面定义)
#Log4J提供的日志输出地点有以下几种：

#org.apache.log4j.ConsoleAppender（控制台），  
#org.apache.log4j.FileAppender（文件），  
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），  
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），  
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.rootLogger=info, stdout, log, errorlog

###定义输出地点stdout：Console ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out

#配置日志输出布局
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern =  %d{ABSOLUTE} [ %t ] [ %p ]:%L - %m%n

###定义输出地点log ###  
###Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
###ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
###Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
###File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。
log4j.appender.log = org.apache.log4j.DailyRollingFileAppender
log4j.appender.log.File = log/log.log
log4j.appender.log.Append = true
log4j.appender.log.Threshold = INFO
log4j.appender.log.DatePattern='.'yyyy-MM-dd
log4j.appender.log.layout = org.apache.log4j.PatternLayout
log4j.appender.log.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t ] %m%n

### 定义输出地点errorlog ###
log4j.appender.errorlog = org.apache.log4j.DailyRollingFileAppender
log4j.appender.errorlog.File = log/error.log
log4j.appender.errorlog.Append = true
log4j.appender.errorlog.Threshold = ERROR 
log4j.appender.errorlog.DatePattern='.'yyyy-MM-dd
log4j.appender.errorlog.layout = org.apache.log4j.PatternLayout
log4j.appender.errorlog.layout.ConversionPattern =%-d{yyyy-MM-dd HH:mm:ss} [ %t ] %m%n